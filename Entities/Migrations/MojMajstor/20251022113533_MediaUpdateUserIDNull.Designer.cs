// <auto-generated />
using System;
using Entities.Universal.MainDataNova;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations.MojMajstor
{
    [DbContext(typeof(MojMajstorContext))]
    [Migration("20251022113533_MediaUpdateUserIDNull")]
    partial class MediaUpdateUserIDNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Universal.Universal.MainDataNova.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertisementId"));

                    b.Property<int>("AdvertisementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClient")
                        .HasColumnType("bit");

                    b.Property<int?>("MediaId")
                        .HasColumnType("int");

                    b.Property<int?>("PayTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementId");

                    b.HasIndex(new[] { "AdvertisementTypeId" }, "IX_Advertisements_AdvertisementTypeId");

                    b.HasIndex(new[] { "PayTypeId" }, "IX_Advertisements_PayTypeId");

                    b.HasIndex(new[] { "PaymentMethodId" }, "IX_Advertisements_PaymentMethodId");

                    b.HasIndex(new[] { "ProfessionId" }, "IX_Advertisements_ProfessionId");

                    b.HasIndex(new[] { "UsersId" }, "IX_Advertisements_UsersId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.AdvertisementOpstine", b =>
                {
                    b.Property<int>("AdvertisementOpstineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertisementOpstineId"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("OpstineId")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementOpstineId");

                    b.HasIndex(new[] { "AdvertisementId" }, "IX_AdvertisementOpstines_AdvertisementId");

                    b.HasIndex(new[] { "OpstineId" }, "IX_AdvertisementOpstines_OpstineId");

                    b.ToTable("AdvertisementOpstines");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.AdvertisementProfessionType", b =>
                {
                    b.Property<int>("AdvertisementProfessionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertisementProfessionTypeId"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionTypeId")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementProfessionTypeId");

                    b.HasIndex(new[] { "AdvertisementId" }, "IX_AdvertisementProfessionTypes_AdvertisementId");

                    b.HasIndex(new[] { "ProfessionTypeId" }, "IX_AdvertisementProfessionTypes_ProfessionTypeId");

                    b.ToTable("AdvertisementProfessionTypes");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.AdvertisementType", b =>
                {
                    b.Property<int>("AdvertisementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvertisementTypeId"));

                    b.Property<string>("AdvertisementTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdvertisementTypeId");

                    b.ToTable("AdvertisementTypes");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Bookmark", b =>
                {
                    b.Property<int>("BookmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookmarkId"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("BookmarkId");

                    b.HasIndex(new[] { "AdvertisementId" }, "IX_Bookmarks_AdvertisementId");

                    b.HasIndex(new[] { "UsersId" }, "IX_Bookmarks_UsersId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.DeletedUser", b =>
                {
                    b.Property<int>("DeletedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeletedUserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.HasKey("DeletedUserId");

                    b.HasIndex(new[] { "TokenId" }, "IX_DeletedUsers_TokenId");

                    b.ToTable("DeletedUsers");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Grade", b =>
                {
                    b.Property<int>("GradesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradesId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClient")
                        .HasColumnType("bit");

                    b.Property<bool>("Negative")
                        .HasColumnType("bit");

                    b.Property<bool>("Positive")
                        .HasColumnType("bit");

                    b.Property<int>("UserLeftCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserReceiveCommentId")
                        .HasColumnType("int");

                    b.HasKey("GradesId");

                    b.HasIndex(new[] { "UserLeftCommentId" }, "IX_Grades_UserLeftCommentId");

                    b.HasIndex(new[] { "UserReceiveCommentId" }, "IX_Grades_UserReceiveCommentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Invitation", b =>
                {
                    b.Property<int>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvitationId"));

                    b.Property<int>("InvitedUserId")
                        .HasColumnType("int");

                    b.Property<int>("OriginUserId")
                        .HasColumnType("int");

                    b.HasKey("InvitationId");

                    b.HasIndex(new[] { "InvitedUserId" }, "IX_Invitations_InvitedUserId");

                    b.HasIndex(new[] { "OriginUserId" }, "IX_Invitations_OriginUserId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.MakeDeal", b =>
                {
                    b.Property<int>("MakeDealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MakeDealId"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AgreementReachedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FirstUserAccept")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstUserGiveRating")
                        .HasColumnType("bit");

                    b.Property<int?>("FirstUserId")
                        .HasColumnType("int");

                    b.Property<bool>("SecondUserAccept")
                        .HasColumnType("bit");

                    b.Property<bool>("SecondUserGiveRating")
                        .HasColumnType("bit");

                    b.Property<int?>("SecondUserId")
                        .HasColumnType("int");

                    b.HasKey("MakeDealId");

                    b.HasIndex(new[] { "AdvertisementId" }, "IX_MakeDeals_AdvertisementId");

                    b.HasIndex(new[] { "FirstUserId" }, "IX_MakeDeals_FirstUserId");

                    b.HasIndex(new[] { "SecondUserId" }, "IX_MakeDeals_SecondUserId");

                    b.ToTable("MakeDeals");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaTypeId"));

                    b.Property<string>("MediaTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaTypeId");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Medium", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Postition")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SRC");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("MediaId");

                    b.HasIndex(new[] { "MediaTypeId" }, "IX_Media_MediaTypeId");

                    b.HasIndex(new[] { "UsersId" }, "IX_Media_UsersId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.NotificationDetail", b =>
                {
                    b.Property<int>("NotificationDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationDetailsId"));

                    b.Property<int?>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<bool>("IsExpirationNotificationSent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotificationSent")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserFrom")
                        .HasColumnType("int");

                    b.Property<int>("UserTo")
                        .HasColumnType("int");

                    b.HasKey("NotificationDetailsId");

                    b.HasIndex(new[] { "UserFrom" }, "IX_NotificationDetails_UserFrom");

                    b.HasIndex(new[] { "UserTo" }, "IX_NotificationDetails_UserTo");

                    b.ToTable("NotificationDetails");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Opstine", b =>
                {
                    b.Property<int>("OpstineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpstineId"));

                    b.Property<string>("OpstinaIme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpstineId");

                    b.ToTable("Opstine", (string)null);
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TokenId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "TokenId" }, "IX_Orders_TokenId");

                    b.HasIndex(new[] { "UsersId" }, "IX_Orders_UsersId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.PayType", b =>
                {
                    b.Property<int>("PayTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayTypeId"));

                    b.Property<string>("PayTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PayTypeId");

                    b.ToTable("PayTypes");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Profession", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionId"));

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfessionId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.ProfessionType", b =>
                {
                    b.Property<int>("ProfessionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionTypeId"));

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfessionTypeId");

                    b.HasIndex(new[] { "ProfessionId" }, "IX_ProfessionTypes_ProfessionId");

                    b.ToTable("ProfessionTypes");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Token", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("bit")
                        .HasColumnName("isRecommended");

                    b.Property<int>("NumberOfToken")
                        .HasColumnType("int");

                    b.Property<double>("OldPrice")
                        .HasColumnType("float");

                    b.Property<string>("Package")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("TokenId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.TokenUser", b =>
                {
                    b.Property<int>("TokenUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenUserId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TokensSummary")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("TokenUserId");

                    b.HasIndex(new[] { "UsersId" }, "IX_TokenUsers_UsersId");

                    b.ToTable("TokenUsers");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.User", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsersId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("OpstineId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Professions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferalCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsersId");

                    b.HasIndex(new[] { "OpstineId" }, "IX_Users_OpstineId");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Advertisement", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.AdvertisementType", "AdvertisementType")
                        .WithMany("Advertisements")
                        .HasForeignKey("AdvertisementTypeId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.PayType", "PayType")
                        .WithMany("Advertisements")
                        .HasForeignKey("PayTypeId");

                    b.HasOne("Universal.Universal.MainDataNova.PaymentMethod", "PaymentMethod")
                        .WithMany("Advertisements")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("Universal.Universal.MainDataNova.Profession", "Profession")
                        .WithMany("Advertisements")
                        .HasForeignKey("ProfessionId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.User", "Users")
                        .WithMany("Advertisements")
                        .HasForeignKey("UsersId")
                        .IsRequired();

                    b.Navigation("AdvertisementType");

                    b.Navigation("PayType");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Profession");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.AdvertisementOpstine", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.Advertisement", "Advertisement")
                        .WithMany("AdvertisementOpstines")
                        .HasForeignKey("AdvertisementId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.Opstine", "Opstine")
                        .WithMany("AdvertisementOpstines")
                        .HasForeignKey("OpstineId")
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("Opstine");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.AdvertisementProfessionType", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.Advertisement", "Advertisement")
                        .WithMany("AdvertisementProfessionTypes")
                        .HasForeignKey("AdvertisementId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.ProfessionType", "ProfessionType")
                        .WithMany("AdvertisementProfessionTypes")
                        .HasForeignKey("ProfessionTypeId")
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("ProfessionType");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Bookmark", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.Advertisement", "Advertisement")
                        .WithMany("Bookmarks")
                        .HasForeignKey("AdvertisementId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.User", "Users")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UsersId")
                        .IsRequired();

                    b.Navigation("Advertisement");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.DeletedUser", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.Token", "Token")
                        .WithMany("DeletedUsers")
                        .HasForeignKey("TokenId")
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Grade", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.User", "UserLeftComment")
                        .WithMany("GradeUserLeftComments")
                        .HasForeignKey("UserLeftCommentId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.User", "UserReceiveComment")
                        .WithMany("GradeUserReceiveComments")
                        .HasForeignKey("UserReceiveCommentId")
                        .IsRequired();

                    b.Navigation("UserLeftComment");

                    b.Navigation("UserReceiveComment");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Invitation", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.User", "InvitedUser")
                        .WithMany("InvitationInvitedUsers")
                        .HasForeignKey("InvitedUserId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.User", "OriginUser")
                        .WithMany("InvitationOriginUsers")
                        .HasForeignKey("OriginUserId")
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("OriginUser");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.MakeDeal", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.Advertisement", "Advertisement")
                        .WithMany("MakeDeals")
                        .HasForeignKey("AdvertisementId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.User", "FirstUser")
                        .WithMany("MakeDealFirstUsers")
                        .HasForeignKey("FirstUserId");

                    b.HasOne("Universal.Universal.MainDataNova.User", "SecondUser")
                        .WithMany("MakeDealSecondUsers")
                        .HasForeignKey("SecondUserId");

                    b.Navigation("Advertisement");

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Medium", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.MediaType", "MediaType")
                        .WithMany("Media")
                        .HasForeignKey("MediaTypeId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.User", "Users")
                        .WithMany("Media")
                        .HasForeignKey("UsersId");

                    b.Navigation("MediaType");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.NotificationDetail", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.User", "UserFromNavigation")
                        .WithMany("NotificationDetailUserFromNavigations")
                        .HasForeignKey("UserFrom");

                    b.HasOne("Universal.Universal.MainDataNova.User", "UserToNavigation")
                        .WithMany("NotificationDetailUserToNavigations")
                        .HasForeignKey("UserTo")
                        .IsRequired();

                    b.Navigation("UserFromNavigation");

                    b.Navigation("UserToNavigation");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Order", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.Token", "Token")
                        .WithMany("Orders")
                        .HasForeignKey("TokenId")
                        .IsRequired();

                    b.HasOne("Universal.Universal.MainDataNova.User", "Users")
                        .WithMany("Orders")
                        .HasForeignKey("UsersId")
                        .IsRequired();

                    b.Navigation("Token");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.ProfessionType", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.Profession", "Profession")
                        .WithMany("ProfessionTypes")
                        .HasForeignKey("ProfessionId")
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.TokenUser", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.User", "Users")
                        .WithMany("TokenUsers")
                        .HasForeignKey("UsersId")
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.User", b =>
                {
                    b.HasOne("Universal.Universal.MainDataNova.Opstine", "Opstine")
                        .WithMany("Users")
                        .HasForeignKey("OpstineId");

                    b.HasOne("Universal.Universal.MainDataNova.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.Navigation("Opstine");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Advertisement", b =>
                {
                    b.Navigation("AdvertisementOpstines");

                    b.Navigation("AdvertisementProfessionTypes");

                    b.Navigation("Bookmarks");

                    b.Navigation("MakeDeals");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.AdvertisementType", b =>
                {
                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.MediaType", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Opstine", b =>
                {
                    b.Navigation("AdvertisementOpstines");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.PayType", b =>
                {
                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.PaymentMethod", b =>
                {
                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Profession", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("ProfessionTypes");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.ProfessionType", b =>
                {
                    b.Navigation("AdvertisementProfessionTypes");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.Token", b =>
                {
                    b.Navigation("DeletedUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Universal.Universal.MainDataNova.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Bookmarks");

                    b.Navigation("GradeUserLeftComments");

                    b.Navigation("GradeUserReceiveComments");

                    b.Navigation("InvitationInvitedUsers");

                    b.Navigation("InvitationOriginUsers");

                    b.Navigation("MakeDealFirstUsers");

                    b.Navigation("MakeDealSecondUsers");

                    b.Navigation("Media");

                    b.Navigation("NotificationDetailUserFromNavigations");

                    b.Navigation("NotificationDetailUserToNavigations");

                    b.Navigation("Orders");

                    b.Navigation("TokenUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
